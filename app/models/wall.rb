class Wall < ActiveRecord::Base
  
  has_many :graffitis

  def assign_graffiti(graffiti_id)
    maybe = []
    current_value = 20
    for i in 0..20
      for j in 0..20

        if grid[j][i] == 0 && (check_around(i, j) || values[j][i] == 0)    
          
          if values[j][i] < current_value
            maybe = []

            maybe << [i, j]
            
            current_value = values[j][i]
          elsif values[j][i] == current_value
            maybe << [i, j] 
          end

        end
      end
    end

    if maybe != []
      coords = maybe.sample
      grid[coords[1]][coords[0]] = graffiti_id
    end
  end

  def check_around(x, y)
    if define_valid_around(x, y) 
      return true
    else
      return false
    end
  end

  def define_valid_around(x, y)
    if x == 0 && y == 0
      return grid[y][x+1] != 0 || grid[y+1][x] != 0
    elsif x == 20 && y == 20
      return grid[y][x-1] != 0 || grid[y-1][x] != 0
    elsif y == 0 && x == 20
      return grid[y+1][x] != 0 || grid[y][x-1] != 0 
    elsif y == 20 && x == 0
      return grid[y][x+1] != 0 || grid[y-1][x] != 0 
    elsif y == 0
      return grid[y][x+1] != 0 || grid[y+1][x] != 0 || grid[y][x-1] != 0 
    elsif y == 20
      return grid[y][x+1] != 0 || grid[y-1][x] != 0 || grid[y][x-1] != 0 
    elsif x == 0
      return grid[y][x+1] != 0 || grid[y+1][x] != 0 || grid[y-1][x] != 0
    elsif x == 20
      return grid[y+1][x] != 0 || grid[y][x-1] != 0 || grid[y-1][x] != 0
    else 
      return grid[y][x+1] != 0 || grid[y+1][x] != 0 || grid[y-1][x] != 0 || grid[y][x-1] != 0 
    end
  end

  def values
    [
      [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
      [19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
      [18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
      [17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],
      [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
      [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
      [14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
      [13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],
      [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
      [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
      [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
      [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
      [13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],
      [14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
      [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
      [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
      [17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],
      [18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
      [19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
      [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    ]
  end

end
